// Generated by CoffeeScript 1.7.1
var $allDevices, $clockTime, $clocks, $gateSize, $halfGateSize, $isImmediate, $openConnection, $selectedDevices, $socketPadding, $socketSize, $stageHeight, $stageWidth, AndGate, BufferGate, Clock, Collectable, Device, Gate, IODevice, IntegratedCircuit, IntegratedDSL, Lightbulb, NandGate, NorGate, NotGate, OrGate, SelectBox, SevenSegment, Socket, Switch, Tool, Toolbox, Wire, XnorGate, XorGate, distance, distanceSquared, initBoolexStage, startBoolex, stopBoolex,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$gateSize = 40;

$halfGateSize = $gateSize / 2;

$socketSize = 4;

$socketPadding = $halfGateSize + 4;

$openConnection = null;

$allDevices = [];

$selectedDevices = {};

$stageWidth = void 0;

$stageHeight = void 0;

$clockTime = 1500;

$clocks = [];

$isImmediate = false;

Collectable = (function() {
  function Collectable(klass) {
    this.klass = klass;
    this.id = Collectable.createUuid();
    this.klass || (this.klass = this.constructor);
    this.klass.add(this);
  }

  Collectable.prototype.destroy = function() {
    return this.klass.remove(this);
  };

  Collectable.add = function(obj) {
    if (this.all == null) {
      this.all = [];
      this.hash = {};
    }
    this.all.push(obj);
    return this.hash[obj.id] = obj;
  };

  Collectable.collection = function() {
    return this.all;
  };

  Collectable.remove = function(obj) {
    if (this.all != null) {
      this.hash[obj.id] = null;
      return this.all = $.grep(this.all, function(obj2) {
        return obj2.id !== obj.id;
      });
    }
  };

  Collectable.find = function(id) {
    return this.hash[id];
  };

  Collectable.createUuid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };

  return Collectable;

})();

Device = (function(_super) {
  var self;

  __extends(Device, _super);

  self = Device;

  Device.height = $gateSize;

  Device.width = $gateSize;

  function Device(numIns, numOuts, klass) {
    this.numIns = numIns;
    this.numOuts = numOuts;
    this.drag = __bind(this.drag, this);
    this.startDrag = __bind(this.startDrag, this);
    this.initSockets();
    this.initGraphics();
    this.initEvents();
    this.dragged = false;
    $allDevices.push(this);
    Device.__super__.constructor.call(this, klass);
    $(window).trigger('refreshDSL');
  }

  Device.prototype.initSockets = function() {
    var i;
    this.inputSockets = this.outputSockets = [];
    if (this.numIns > 0) {
      this.inputSockets = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = this.numIns; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(new Socket(this, i, 'in'));
        }
        return _results;
      }).call(this);
    }
    if (this.numOuts > 0) {
      return this.outputSockets = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 1, _ref = this.numOuts; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
          _results.push(new Socket(this, i, 'out'));
        }
        return _results;
      }).call(this);
    }
  };

  Device.prototype.initGraphics = function() {
    this.graphics = new createjs.Container();
    this.box = this.constructor.createGraphics(this);
    this.selected = new createjs.Shape();
    this.selected.graphics.beginFill('rgba(0, 0, 255, 0.05)');
    this.selected.graphics.beginStroke('rgba(0, 0, 255, 0.3)');
    this.selected.graphics.drawRect(0, 0, $gateSize + 20, $gateSize + 20);
    this.selected.x = this.selected.y = -($gateSize * 0.5 + 10);
    this.selected.visible = false;
    this.graphics.addChild(this.selected);
    this.graphics.addChild(this.box);
    this.sockets = this.drawSockets();
    return window.boolexStage.addChild(this.graphics);
  };

  Device.prototype.drawSockets = function() {
    var i, socket, _i, _j, _len, _len1, _ref, _ref1, _results;
    _ref = this.inputSockets;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      socket = _ref[i];
      socket.graphics.x = -$socketPadding * (this.constructor.width / $gateSize);
      socket.graphics.y = (this.constructor.height / (this.numIns + 1)) * (i + 1) - this.constructor.height * 0.5;
      this.graphics.addChild(socket.graphics);
    }
    _ref1 = this.outputSockets;
    _results = [];
    for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
      socket = _ref1[i];
      socket.graphics.x = $socketPadding * (this.constructor.width / $gateSize);
      socket.graphics.y = (this.constructor.height / (this.numOuts + 1)) * (i + 1) - this.constructor.height * 0.5;
      _results.push(this.graphics.addChild(socket.graphics));
    }
    return _results;
  };

  Device.prototype.initEvents = function() {
    this.box.on("mousedown", (function(_this) {
      return function(e) {
        _this.dragged = false;
        return _this.graphics.offset = {
          x: _this.graphics.x - e.stageX,
          y: _this.graphics.y - e.stageY
        };
      };
    })(this));
    this.box.on("pressmove", this.drag);
    return this.box.on("click", (function(_this) {
      return function(e) {
        if (!_this.dragged) {
          console.log(_this.id);
          return _this.click();
        }
      };
    })(this));
  };

  Device.prototype.inputDevices = function() {
    var inputSocket;
    return [
      (function() {
        var _i, _len, _ref, _results;
        if (inputSocket.wires.length) {
          _ref = this.inputSockets;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            inputSocket = _ref[_i];
            _results.push(inputSocket.wires[0].fromSocket);
          }
          return _results;
        }
      }).call(this)
    ];
  };

  Device.prototype.startDrag = function(e) {
    this.graphics.offset = {
      x: this.graphics.x - e.stageX,
      y: this.graphics.y - e.stageY
    };
    return boolexStage.dragged = this;
  };

  Device.prototype.drag = function(e) {
    var socket, wire, _i, _len, _ref, _results;
    this.dragged = true;
    this.graphics.x = e.stageX + this.graphics.offset.x;
    this.graphics.y = e.stageY + this.graphics.offset.y;
    _ref = this.inputSockets.concat(this.outputSockets);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      socket = _ref[_i];
      _results.push((function() {
        var _j, _len1, _ref1, _results1;
        _ref1 = socket.wires;
        _results1 = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          wire = _ref1[_j];
          _results1.push(wire.redraw());
        }
        return _results1;
      })());
    }
    return _results;
  };

  Device.prototype.select = function() {
    $selectedDevices[this.id] = this;
    return this.selected.visible = true;
  };

  Device.prototype.deselect = function() {
    if ($selectedDevices[this.id]) {
      delete $selectedDevices[this.id];
    }
    return this.selected.visible = false;
  };

  Device.prototype.click = function() {
    Device.deselectAll();
    return this.select();
  };

  Device.prototype.destroy = function(keepSockets) {
    var socket, _i, _len, _ref;
    if (keepSockets == null) {
      keepSockets = false;
    }
    if (!keepSockets) {
      _ref = this.inputSockets.concat(this.outputSockets);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        socket = _ref[_i];
        socket.destroy();
      }
    }
    if (this.graphics.parent) {
      this.graphics.parent.removeChild(this.graphics);
    }
    window.$allDevices = $.grep($allDevices, (function(_this) {
      return function(device) {
        return device.id !== _this.id;
      };
    })(this));
    $(window).trigger('refreshDSL');
    return Device.__super__.destroy.call(this);
  };

  Device.createGraphics = function(device) {
    var bounds, box, container, text;
    container = new createjs.Container();
    box = new createjs.Shape();
    box.graphics.beginFill('black').drawRect(0, 0, $gateSize, $gateSize);
    box.graphics.beginFill('white').drawRect(2, 2, $gateSize - 4, $gateSize - 4);
    box.x = box.y = -$halfGateSize;
    container.addChild(box);
    text = new createjs.Text(this.displayName, '14px Helvetica');
    bounds = text.getBounds();
    text.x = -bounds.width / 2;
    text.y = -bounds.height / 2;
    container.addChild(text);
    return container;
  };

  Device.deselectAll = function() {
    var device, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = $allDevices.length; _i < _len; _i++) {
      device = $allDevices[_i];
      _results.push(device.deselect());
    }
    return _results;
  };

  Device.prototype.x = function() {
    return this.graphics.x;
  };

  Device.prototype.y = function() {
    return this.graphics.y;
  };

  return Device;

})(Collectable);

IODevice = (function(_super) {
  __extends(IODevice, _super);

  function IODevice(numIns, numOuts) {
    IODevice.__super__.constructor.call(this, numIns, numOuts, IODevice);
    $(window).trigger('update');
  }

  IODevice.prototype.draw = function() {};

  IODevice.registerType = function(ioDeviceClass) {
    return this.types.push(ioDeviceClass);
  };

  IODevice.displayName = 'IO';

  IODevice.types = [];

  return IODevice;

})(Device);

IntegratedDSL = (function() {
  function IntegratedDSL() {}

  IntegratedDSL.circuits = {};

  IntegratedDSL.saveDSL = function(name, dsl) {
    if (name in this.circuits) {
      return console.log("Tried to overwrite " + name);
    } else {
      return this.circuits[name] = {
        dsl: dsl,
        deps: []
      };
    }
  };

  IntegratedDSL.getDSL = function(name) {
    if (name in this.circuits) {
      return this.circuits[name].dsl;
    }
    console.log("Could not retrieve " + name);
    return void 0;
  };

  IntegratedDSL.deleteDSL = function(name) {
    if (name in this.circuits) {
      return delete this.circuits[name];
    }
  };

  IntegratedDSL.setDependencies = function(name, deps) {
    if (name in this.circuits) {
      return this.circuits[name].deps = deps;
    } else {
      console.log("Could not retrieve " + name);
      return void 0;
    }
  };

  IntegratedDSL.getDependencies = function(name) {
    var allDeps, dep, myDeps, nextDeps, _i, _len;
    if (name in this.circuits) {
      myDeps = this.circuits[name].deps;
      allDeps = [];
      for (_i = 0, _len = myDeps.length; _i < _len; _i++) {
        dep = myDeps[_i];
        nextDeps = this.getDependencies(dep);
        nextDeps.unshift(dep);
        allDeps.push(nextDeps);
      }
      return allDeps;
    }
    console.log("Could not retrieve " + name);
    return [];
  };

  return IntegratedDSL;

})();

Clock = (function(_super) {
  __extends(Clock, _super);

  function Clock() {
    $clocks.push(this);
    Clock.__super__.constructor.call(this, 0, 1);
    this.outSocket = this.outputSockets[0];
    this.type = 1;
  }

  Clock.prototype.click = function() {
    var wantedType;
    wantedType = parseInt(prompt("Speed of clock (higher is slower):"));
    if (!isNaN(wantedType) && wantedType > 0) {
      return this.type = wantedType;
    }
  };

  Clock.createGraphics = function(device) {
    var box, clockSign, clockWell, container;
    container = new createjs.Container();
    clockWell = new createjs.Shape();
    clockWell.graphics.setStrokeStyle(2);
    clockWell.graphics.beginStroke('#000');
    clockWell.graphics.drawRect(-10, -10, 20, 20);
    clockSign = new createjs.Shape();
    clockSign.graphics.setStrokeStyle(1).beginStroke('#000');
    clockSign.graphics.moveTo(-5, -3);
    clockSign.graphics.lineTo(-5, 3);
    clockSign.graphics.lineTo(0, 3);
    clockSign.graphics.lineTo(0, -3);
    clockSign.graphics.lineTo(5, -3);
    clockSign.graphics.lineTo(5, 3);
    if (device) {
      device.clockSign = clockSign;
    }
    container.addChild(clockWell);
    container.addChild(clockSign);
    box = new createjs.Shape();
    box.graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));
    box.graphics.rect(0, 0, $gateSize, $gateSize);
    box.x = -$gateSize * 0.5;
    box.y = -$gateSize * 0.5;
    container.hitArea = box;
    return container;
  };

  Clock.prototype.draw = function() {
    if (this.outSocket && Socket.states[this.outSocket.name] === 'on' && $openConnection) {
      return this.clockSign.shadow = new createjs.Shadow("#00aaff", 0, 0, 5);
    } else {
      return this.clockSign.shadow = null;
    }
  };

  Clock.displayName = 'CLOCK';

  return Clock;

})(IODevice);

IODevice.registerType(Clock);

Gate = (function(_super) {
  __extends(Gate, _super);

  function Gate(numIns, numOuts) {
    this.numIns = numIns;
    this.numOuts = numOuts;
    Gate.__super__.constructor.call(this, this.numIns, this.numOuts, Gate);
  }

  Gate.registerType = function(gateClass) {
    return this.types.push(gateClass);
  };

  Gate.createGraphics = function(device) {
    var bitmap, box, container;
    container = new createjs.Container();
    bitmap = new createjs.Bitmap(this.bitmap);
    bitmap.x = -$gateSize * 0.5;
    bitmap.y = -$gateSize * 0.5;
    container.addChild(bitmap);
    box = new createjs.Shape();
    box.graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));
    box.graphics.rect(0, 0, $gateSize, $gateSize);
    box.x = -$gateSize * 0.5;
    box.y = -$gateSize * 0.5;
    container.hitArea = box;
    return container;
  };

  Gate.prototype.createDSL = function() {};

  Gate.inputs = function(gates) {
    var gate, socket, sockets;
    if (gates) {
      sockets = [].concat.apply([], (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = gates.length; _i < _len; _i++) {
          gate = gates[_i];
          _results.push((function() {
            var _j, _len1, _ref, _results1;
            _ref = gate.inputSockets;
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              socket = _ref[_j];
              if (!socket.connectedToGate(gates)) {
                _results1.push(socket);
              }
            }
            return _results1;
          })());
        }
        return _results;
      })());
    } else {
      sockets = $.grep(Socket.all, function(socket) {
        return socket.type === 'in' && !socket.connectedToGate(gates);
      });
    }
    return sockets;
  };

  Gate.outs = function(gates) {
    var gate, socket, sockets;
    if (gates) {
      sockets = [].concat.apply([], (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = gates.length; _i < _len; _i++) {
          gate = gates[_i];
          _results.push((function() {
            var _j, _len1, _ref, _results1;
            _ref = gate.outputSockets;
            _results1 = [];
            for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
              socket = _ref[_j];
              if (socket.isRealOutput()) {
                _results1.push(socket);
              }
            }
            return _results1;
          })());
        }
        return _results;
      })());
    } else {
      sockets = $.grep(Socket.all, function(socket) {
        return socket.isRealOutput();
      });
    }
    return sockets;
  };

  Gate.createDSL = function() {
    var concatenate, gate, inputs, integratedCircuits, main, outs, s, socket, _i, _len, _ref;
    inputs = this.inputs();
    outs = this.outs();
    integratedCircuits = [];
    if (Gate.all == null) {
      return "circuit main()\nend";
    }
    concatenate = function(items) {
      return [].concat.apply([], items);
    };
    main = "circuit main(" + (((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = inputs.length; _i < _len; _i++) {
        s = inputs[_i];
        _results.push(s.name);
      }
      return _results;
    })()).unique().join(', ')) + ")\n";
    _ref = this.all;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      gate = _ref[_i];
      if (gate instanceof IntegratedCircuit) {
        integratedCircuits.push(gate.name);
        integratedCircuits.push(concatenate(IntegratedDSL.getDependencies(gate.name)));
      }
      main += '  ' + gate.createDSL() + '\n';
    }
    main += '  out ' + ((function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = outs.length; _j < _len1; _j++) {
        socket = outs[_j];
        _results.push(socket.name);
      }
      return _results;
    })()).join(', ') + '\n';
    main += 'end';
    integratedCircuits = concatenate(integratedCircuits).reverse().unique().map(function(ic) {
      return IntegratedDSL.getDSL(ic);
    }).join("\n\n");
    return integratedCircuits + (integratedCircuits !== "" ? "\n\n" : "") + main;
  };

  Gate.displayName = 'GATE';

  Gate.bitmap = "";

  Gate.types = [];

  return Gate;

})(Device);

AndGate = (function(_super) {
  __extends(AndGate, _super);

  function AndGate() {
    AndGate.__super__.constructor.call(this, 2, 1);
  }

  AndGate.prototype.createDSL = function() {
    var in1, in2, out;
    in1 = this.inputSockets[0];
    in2 = this.inputSockets[1];
    out = this.outputSockets[0];
    return "" + out.name + " = " + in1.name + " * " + in2.name;
  };

  AndGate.displayName = 'AND';

  AndGate.bitmap = '/assets/images/and_gate.png';

  return AndGate;

})(Gate);

OrGate = (function(_super) {
  __extends(OrGate, _super);

  function OrGate() {
    OrGate.__super__.constructor.call(this, 2, 1);
  }

  OrGate.prototype.createDSL = function() {
    var in1, in2, out;
    in1 = this.inputSockets[0];
    in2 = this.inputSockets[1];
    out = this.outputSockets[0];
    return "" + out.name + " = " + in1.name + " + " + in2.name;
  };

  OrGate.displayName = 'OR';

  OrGate.bitmap = '/assets/images/or_gate.png';

  return OrGate;

})(Gate);

NotGate = (function(_super) {
  __extends(NotGate, _super);

  function NotGate() {
    NotGate.__super__.constructor.call(this, 1, 1);
  }

  NotGate.prototype.createDSL = function() {
    var in1, out;
    in1 = this.inputSockets[0];
    out = this.outputSockets[0];
    return "" + out.name + " = " + in1.name + "'";
  };

  NotGate.displayName = 'NOT';

  NotGate.bitmap = '/assets/images/not_gate.png';

  return NotGate;

})(Gate);

XorGate = (function(_super) {
  __extends(XorGate, _super);

  function XorGate() {
    XorGate.__super__.constructor.call(this, 2, 1);
  }

  XorGate.prototype.createDSL = function() {
    var in1, in2, out;
    in1 = this.inputSockets[0];
    in2 = this.inputSockets[1];
    out = this.outputSockets[0];
    return "" + out.name + " = " + in1.name + " ^ " + in2.name;
  };

  XorGate.displayName = 'XOR';

  XorGate.bitmap = '/assets/images/xor_gate.png';

  return XorGate;

})(Gate);

NandGate = (function(_super) {
  __extends(NandGate, _super);

  function NandGate() {
    NandGate.__super__.constructor.call(this, 2, 1);
  }

  NandGate.prototype.createDSL = function() {
    var in1, in2, out;
    in1 = this.inputSockets[0];
    in2 = this.inputSockets[1];
    out = this.outputSockets[0];
    return "" + out.name + " = " + in1.name + " nand " + in2.name;
  };

  NandGate.displayName = 'NAND';

  NandGate.bitmap = '/assets/images/nand_gate.png';

  return NandGate;

})(Gate);

NorGate = (function(_super) {
  __extends(NorGate, _super);

  function NorGate() {
    NorGate.__super__.constructor.call(this, 2, 1);
  }

  NorGate.prototype.createDSL = function() {
    var in1, in2, out;
    in1 = this.inputSockets[0];
    in2 = this.inputSockets[1];
    out = this.outputSockets[0];
    return "" + out.name + " = " + in1.name + " nor " + in2.name;
  };

  NorGate.displayName = 'NOR';

  NorGate.bitmap = '/assets/images/nor_gate.png';

  return NorGate;

})(Gate);

XnorGate = (function(_super) {
  __extends(XnorGate, _super);

  function XnorGate() {
    XnorGate.__super__.constructor.call(this, 2, 1);
  }

  XnorGate.prototype.createDSL = function() {
    var in1, in2, out;
    in1 = this.inputSockets[0];
    in2 = this.inputSockets[1];
    out = this.outputSockets[0];
    return "" + out.name + " = " + in1.name + " xnor " + in2.name;
  };

  XnorGate.displayName = 'XNOR';

  XnorGate.bitmap = '/assets/images/xnor_gate.png';

  return XnorGate;

})(Gate);

BufferGate = (function(_super) {
  __extends(BufferGate, _super);

  function BufferGate() {
    BufferGate.__super__.constructor.call(this, 1, 1);
  }

  BufferGate.prototype.createDSL = function() {
    var in1, out;
    in1 = this.inputSockets[0];
    out = this.outputSockets[0];
    return "" + out.name + " = " + in1.name;
  };

  BufferGate.displayName = 'BUFF';

  BufferGate.bitmap = '/assets/images/buffer_gate.png';

  return BufferGate;

})(Gate);

Gate.registerType(AndGate);

Gate.registerType(OrGate);

Gate.registerType(NotGate);

Gate.registerType(XorGate);

Gate.registerType(NandGate);

Gate.registerType(NorGate);

Gate.registerType(XnorGate);

Gate.registerType(BufferGate);

IntegratedCircuit = (function(_super) {
  __extends(IntegratedCircuit, _super);

  IntegratedCircuit.height = $gateSize * 2;

  IntegratedCircuit.width = $gateSize * 2;

  function IntegratedCircuit(gates_or_dsl) {
    var allSockets, concatenate, dest, destinationNames, destinations, gate, i, inConnections, inputs, integratedDSL, internalDSL, internalInputSet, internalOutputSet, match, name, outConnections, outputs, setMinus, sock, socket, socks, sourceNames, sources, str, sumX, sumY, x, y, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p, _ref, _ref1;
    if (gates_or_dsl instanceof Array) {
      this.gates = gates_or_dsl;
      this.inputSockets = [];
      this.outputSockets = [];
      concatenate = function(items) {
        return [].concat.apply([], items);
      };
      setMinus = function(as, bs) {
        var a, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = as.length; _i < _len; _i++) {
          a = as[_i];
          if ($.inArray(a, bs) < 0) {
            _results.push(a);
          }
        }
        return _results;
      };
      internalInputSet = concatenate((function() {
        var _i, _len, _ref, _results;
        _ref = this.gates;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          gate = _ref[_i];
          _results.push(gate.inputSockets);
        }
        return _results;
      }).call(this)).map(function(inSocket) {
        return inSocket.id;
      });
      internalOutputSet = concatenate((function() {
        var _i, _len, _ref, _results;
        _ref = this.gates;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          gate = _ref[_i];
          _results.push(gate.outputSockets);
        }
        return _results;
      }).call(this)).map(function(outSocket) {
        return outSocket.id;
      });
      allSockets = concatenate([internalInputSet, internalOutputSet]);
      sources = setMinus(concatenate(internalInputSet.map(function(id) {
        var wire, _i, _len, _ref, _results;
        _ref = Socket.find(id).wires;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          wire = _ref[_i];
          _results.push(wire.fromSocket.id);
        }
        return _results;
      })), allSockets).unique();
      destinations = setMinus(concatenate(internalOutputSet.map(function(id) {
        var wire, _i, _len, _ref, _results;
        _ref = Socket.find(id).wires;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          wire = _ref[_i];
          _results.push(wire.toSocket.id);
        }
        return _results;
      })), allSockets).unique();
      sources = sources.sort(function(a, b) {
        return Socket.find(a).y() - Socket.find(b).y();
      });
      destinations = destinations.sort(function(a, b) {
        return Socket.find(a).y() - Socket.find(b).y();
      });
      sourceNames = sources.map(function(x) {
        return Socket.find(x).name;
      }).unique();
      destinationNames = destinations.map(function(x) {
        return Socket.find(x).name;
      }).unique();
      this.name = "ic_" + Math.floor(Math.random() * 100);
      integratedDSL = ("circuit " + this.name + "(") + sourceNames.join(", ") + ")\n    ";
      internalDSL = this.gates.map(function(gate) {
        return gate.createDSL();
      }).join("\n    ");
      integratedDSL += internalDSL + "\n    out " + destinationNames.join(", ") + "\nend";
      IntegratedDSL.saveDSL(this.name, integratedDSL);
      this.dsl = [];
      _ref = this.gates;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gate = _ref[_i];
        if (gate instanceof IntegratedCircuit) {
          this.dsl.push(gate.name);
        }
      }
      IntegratedDSL.setDependencies(this.name, this.dsl);
      outConnections = [];
      for (i = _j = 0, _len1 = destinationNames.length; _j < _len1; i = ++_j) {
        name = destinationNames[i];
        outConnections[i] = [];
        for (_k = 0, _len2 = destinations.length; _k < _len2; _k++) {
          dest = destinations[_k];
          socket = Socket.find(dest);
          if (socket.name === name) {
            outConnections[i].push(socket);
          }
        }
      }
      inConnections = sources.map(function(x) {
        return [Socket.find(x)];
      });
      sumX = 0;
      sumY = 0;
      _ref1 = this.gates;
      for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
        gate = _ref1[_l];
        sumX += gate.x();
        sumY += gate.y();
        gate.destroy();
      }
      x = sumX / this.gates.length;
      y = sumY / this.gates.length;
      IntegratedCircuit.__super__.constructor.call(this, sourceNames.length, destinationNames.length);
      for (i = _m = 0, _len4 = outConnections.length; _m < _len4; i = ++_m) {
        socks = outConnections[i];
        for (_n = 0, _len5 = socks.length; _n < _len5; _n++) {
          sock = socks[_n];
          new Wire(this.outputSockets[i], sock);
        }
      }
      for (i = _o = 0, _len6 = inConnections.length; _o < _len6; i = ++_o) {
        socks = inConnections[i];
        for (_p = 0, _len7 = socks.length; _p < _len7; _p++) {
          sock = socks[_p];
          new Wire(sock, this.inputSockets[i]);
        }
      }
    } else {
      this.dsl = gates_or_dsl;
      match = /circuit ([a-zA-Z0-9_\-]+)\(([^)]*)\)/m.exec(this.dsl);
      this.name = match[1];
      inputs = (function() {
        var _len8, _q, _ref2, _results;
        _ref2 = match[2].split(',');
        _results = [];
        for (_q = 0, _len8 = _ref2.length; _q < _len8; _q++) {
          str = _ref2[_q];
          _results.push(str.trim());
        }
        return _results;
      })();
      match = /^\s*out ([_a-zA-Z0-9, ]+)$/m.exec(this.dsl);
      outputs = (function() {
        var _len8, _q, _ref2, _results;
        _ref2 = match[1].split(',');
        _results = [];
        for (_q = 0, _len8 = _ref2.length; _q < _len8; _q++) {
          str = _ref2[_q];
          _results.push(str.trim());
        }
        return _results;
      })();
      x = $stageWidth * 0.5;
      y = $stageHeight * 0.5;
      IntegratedDSL.saveDSL(this.name, this.dsl);
      this.dsl = [];
      IntegratedCircuit.__super__.constructor.call(this, inputs.length, outputs.length);
    }
    this.graphics.x = x;
    this.graphics.y = y;
    $(window).trigger('refreshDSL');
  }

  IntegratedCircuit.prototype.randomizeSocketLocalNames = function() {
    var socket, _i, _len, _ref, _results;
    _ref = this.inputSockets.concat(this.outputSockets);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      socket = _ref[_i];
      _results.push(socket.localName = Socket.makeName());
    }
    return _results;
  };

  IntegratedCircuit.createGraphics = function(device) {
    var bounds, box, container, text;
    container = new createjs.Container();
    box = new createjs.Shape();
    box.graphics.beginFill('black').drawRect(0, 0, $gateSize * 2, $gateSize * 2);
    box.graphics.beginFill('white').drawRect(2, 2, $gateSize * 2 - 4, $gateSize * 2 - 4);
    box.x = box.y = -$gateSize;
    container.addChild(box);
    text = new createjs.Text(device.name, '14px Helvetica');
    bounds = text.getBounds();
    text.x = -bounds.width / 2;
    this.constructor.width = bounds.width + 5;
    text.y = -bounds.height / 2;
    container.addChild(text);
    return container;
  };

  IntegratedCircuit.prototype.createDSL = function() {
    var socket;
    return "" + (((function() {
      var _i, _len, _ref, _results;
      _ref = this.outputSockets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        socket = _ref[_i];
        _results.push(socket.name);
      }
      return _results;
    }).call(this)).join(', ')) + " = " + this.name + "(" + (((function() {
      var _i, _len, _ref, _results;
      _ref = this.inputSockets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        socket = _ref[_i];
        _results.push(socket.name);
      }
      return _results;
    }).call(this)).join(', ')) + ")";
  };

  IntegratedCircuit.prototype.circuitDSL = function() {
    var gate, integratedCircuits, main, s, socket, _i, _len, _ref;
    if (this.dsl) {
      return this.dsl;
    }
    integratedCircuits = '';
    if (!this.gates) {
      return "circuit " + this.name + "()\nend";
    }
    main = "circuit " + this.name + "(" + (((function() {
      var _i, _len, _ref, _results;
      _ref = this.inputSockets;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        _results.push(s.name);
      }
      return _results;
    }).call(this)).unique().join(', ')) + ")\n";
    _ref = this.gates;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      gate = _ref[_i];
      if (gate instanceof IntegratedCircuit) {
        integratedCircuits += gate.circuitDSL() + '\n\n';
      }
      main += '  ' + gate.createDSL() + '\n';
    }
    main += '  out ' + ((function() {
      var _j, _len1, _ref1, _results;
      _ref1 = this.outputSockets;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        socket = _ref1[_j];
        _results.push(socket.name);
      }
      return _results;
    }).call(this)).join(', ') + '\n';
    main += 'end';
    return integratedCircuits + main;
  };

  return IntegratedCircuit;

})(Gate);

Lightbulb = (function(_super) {
  __extends(Lightbulb, _super);

  function Lightbulb() {
    Lightbulb.__super__.constructor.call(this, 1, 0);
  }

  Lightbulb.createGraphics = function(device) {
    var bitmapOff, bitmapOn, box, container;
    container = new createjs.Container();
    bitmapOff = new createjs.Bitmap(this.bitmapOffPath);
    bitmapOff.x = -$gateSize * 0.5;
    bitmapOff.y = -$gateSize * 0.5;
    bitmapOn = new createjs.Bitmap(this.bitmapOnPath);
    bitmapOn.x = -$gateSize * 0.5;
    bitmapOn.y = -$gateSize * 0.5;
    bitmapOn.visible = false;
    container.addChild(bitmapOff);
    container.addChild(bitmapOn);
    if (device != null) {
      device.bitmapOff = bitmapOff;
      device.bitmapOn = bitmapOn;
    }
    box = new createjs.Shape();
    box.graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));
    box.graphics.rect(0, 0, $gateSize, $gateSize);
    box.x = -$gateSize * 0.5;
    box.y = -$gateSize * 0.5;
    container.hitArea = box;
    return container;
  };

  Lightbulb.prototype.draw = function() {
    if (Socket.states[this.inputSockets[0].name] === 'on') {
      this.bitmapOn.visible = true;
      return this.bitmapOff.visible = false;
    } else {
      this.bitmapOn.visible = false;
      return this.bitmapOff.visible = true;
    }
  };

  Lightbulb.displayName = 'BULB';

  Lightbulb.bitmapOffPath = '/assets/images/lightbulb_off.png';

  Lightbulb.bitmapOnPath = '/assets/images/lightbulb_on.png';

  return Lightbulb;

})(IODevice);

IODevice.registerType(Lightbulb);

Array.prototype.unique = function() {
  var key, res, seen, _i, _ref;
  seen = {};
  res = [];
  for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
    if (!(this[key] in seen)) {
      res.push(this[key]);
    }
    seen[this[key]] = true;
  }
  return res;
};

$(document).ready(function() {
  window.canvas = $('#boolex-stage');
  window.$stageWidth = canvas[0].width = canvas.parent().innerWidth();
  window.$stageHeight = canvas[0].height = $(window).innerHeight();
  canvas.mousedown(function(e) {
    return e.preventDefault();
  });
  return initBoolexStage();
});

initBoolexStage = function() {
  var dslFactory, selectBox, stageArea, t, toolbox;
  window.boolexStage = new createjs.Stage("boolex-stage");
  selectBox = null;
  stageArea = new createjs.Shape();
  stageArea.graphics.beginFill('rgba(255,255,255,0.01)').drawRect(0, 0, canvas[0].width, canvas[0].height);
  boolexStage.addChild(stageArea);
  toolbox = new Toolbox();
  boolexStage.dragged = null;
  boolexStage.on('mousedown', function(e) {
    if (boolexStage.getObjectUnderPoint(e.stageX, e.stageY).id === stageArea.id) {
      Device.deselectAll();
      selectBox = new SelectBox(e.stageX, e.stageY);
      return boolexStage.addChild(selectBox.box);
    }
  });
  boolexStage.on('stagemousemove', function(e) {
    if (boolexStage.dragged != null) {
      return boolexStage.dragged.drag(e);
    }
  });
  boolexStage.on('stagemouseup', function(e) {
    if (boolexStage.dragged && boolexStage.dragged.stopDrag) {
      boolexStage.dragged.stopDrag(e);
    }
    return boolexStage.dragged = null;
  });
  boolexStage.on('pressmove', function(e) {
    if (selectBox != null) {
      selectBox.endX = e.stageX;
      selectBox.endY = e.stageY;
      selectBox.draw();
      return selectBox.selectDevicesUnder();
    }
  });
  boolexStage.on('pressup', function(e) {
    if (selectBox != null) {
      boolexStage.removeChild(selectBox.box);
      return selectBox = null;
    }
  });
  createjs.Ticker.on('tick', function() {
    return boolexStage.update();
  });
  t = setInterval(function() {
    var clock, _i, _len;
    $(window).trigger('refreshDSL');
    if ($openConnection) {
      $openConnection.send(JSON.stringify({
        command: 'heartbeat'
      }));
      for (_i = 0, _len = $clocks.length; _i < _len; _i++) {
        clock = $clocks[_i];
        if (window.numTicks % clock.type === 0) {
          if (Socket.states[clock.outSocket.name] === 'on') {
            Socket.states[clock.outSocket.name] = 'off';
          } else {
            Socket.states[clock.outSocket.name] = 'on';
          }
          $(window).trigger('update', [false, clock.outSocket]);
        }
      }
      return window.numTicks++;
    }
  }, 1500);
  $(window).on('refreshDSL', function() {
    var dsl;
    dsl = Gate.createDSL();
    dsl = syntaxColor(dsl);
    return $('pre#code').html(dsl);
  });
  $(document).keydown(function(e) {
    var active, device, id;
    active = $(document.activeElement);
    if (!active.is('input') && !active.is('textarea') && (e.which === 46 || e.which === 8)) {
      for (id in $selectedDevices) {
        device = $selectedDevices[id];
        device.destroy();
      }
      window.$selectedDevices = {};
      return false;
    }
  });
  $('#start-stop-button').click(function() {
    var $this;
    $this = $(this);
    if ($this.data('running') != null) {
      stopBoolex();
      $(window).trigger('update');
      $this.removeClass('btn-danger').addClass('btn-primary').text('Start');
      return $this.data('running', null);
    } else {
      window.numTicks = 0;
      startBoolex();
      $this.removeClass('btn-primary').addClass('btn-danger').text('Stop');
      return $this.data('running', true);
    }
  });
  $('#integrated-circuit-button').click(function() {
    var device, gates, ic, id;
    gates = [];
    for (id in $selectedDevices) {
      device = $selectedDevices[id];
      if (device instanceof Gate) {
        gates.push(device);
      }
    }
    window.$selectedDevices = {};
    ic = new IntegratedCircuit(gates);
    boolexStage.addChild(ic.graphics);
    return $(window).trigger('update');
  });
  $('#load-circuit-button').click(function() {
    return $('#load-circuit-modal').modal('show');
  });
  $('#insert-circuit-button').click(function() {
    var dsl, ic;
    $('#load-circuit-modal').modal('hide');
    dsl = $('#circuit-dsl').val();
    ic = new IntegratedCircuit(dsl);
    boolexStage.addChild(ic.graphics);
    return $(window).trigger('update');
  });
  $('#new-button').click(function() {
    var device, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = $allDevices.length; _i < _len; _i++) {
      device = $allDevices[_i];
      _results.push(device.destroy());
    }
    return _results;
  });
  $('#tutorial-button').click(function() {
    return startTutorial();
  });
  $('#next-button').click(function() {
    return nextSlide();
  });
  $('#previous-button').click(function() {
    return previousSlide();
  });
  $('#cancel-button').click(function() {
    return stopTutorial();
  });
  dslFactory = new DSLFactory();
  $('#insert-rom').click(function() {
    var dsl, ic, lines;
    $('#rom-modal').modal('hide');
    lines = $('#rom-rows').val().replace(/0/g, 'f').replace(/1/g, 't').split("\n");
    dsl = dslFactory.generateROM(lines);
    console.log(dsl);
    if (!dsl) {
      alert("Invalid ROM size!");
      return;
    }
    ic = new IntegratedCircuit(dsl);
    boolexStage.addChild(ic.graphics);
    return $(window).trigger('update');
  });
  $('#insert-decoder').click(function() {
    var dsl, ic, n;
    $('#decoder-modal').modal('hide');
    n = parseInt($('#decoder-n').val());
    dsl = dslFactory.generateDecoder(n);
    if (!dsl) {
      alert("Invalid decoder size!");
      return;
    }
    ic = new IntegratedCircuit(dsl);
    boolexStage.addChild(ic.graphics);
    return $(window).trigger('update');
  });
  $('.load-premade-circuit').click(function() {
    var $this, circuit;
    $this = $(this);
    circuit = $this.data('circuit');
    if (circuit === 'rom') {
      return $('#rom-modal').modal('show');
    } else if (circuit === 'encoder') {
      return $('#decoder-modal').modal('show');
    } else if (circuit === 'decoder') {
      return $('#decoder-modal').modal('show');
    }
  });
  $('#toggle-gate-delay').click(function() {
    window.$isImmediate = !$(this).hasClass('active');
    if ($isImmediate) {
      return $(this).find('span').text('On');
    } else {
      return $(this).find('span').text('Off');
    }
  });
  return $(window).bind('update', function(e, isManual, socket) {
    var device, devices, wire, _i, _j, _len, _len1, _ref;
    if (isManual == null) {
      isManual = true;
    }
    if (socket == null) {
      socket = null;
    }
    devices = IODevice.all || [];
    for (_i = 0, _len = devices.length; _i < _len; _i++) {
      device = devices[_i];
      device.draw();
    }
    _ref = Wire.all || [];
    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
      wire = _ref[_j];
      wire.redraw();
    }
    if (($openConnection != null) && (socket != null)) {
      console.log(socket);
      console.log("Sending: " + JSON.stringify({
        command: 'update',
        socket: {
          name: socket.name,
          value: Socket.states[socket.name] === 'on'
        }
      }));
      return $openConnection.send(JSON.stringify({
        command: 'update',
        socket: {
          name: socket.name,
          value: Socket.states[socket.name] === 'on'
        }
      }));
    }
  });
};

distanceSquared = function(x1, y1, x2, y2) {
  var dx, dy;
  dx = x2 - x1;
  dy = y2 - y1;
  return dx * dx + dy * dy;
};

distance = function(x1, y1, x2, y2) {
  return Math.sqrt(distanceSquared(x1, y1, x2, y2));
};

window.cometMessage = function(message) {
  return console.log("Event received: " + message);
};

window.echo = function(message) {
  return $('#echoer').attr('src', "/echo/" + (encodeURIComponent(message)));
};

startBoolex = function() {
  var dsl;
  dsl = Gate.createDSL();
  $openConnection = new WebSocket("ws://" + location.host + "/boolex", ['soap', 'xmpp']);
  $openConnection.onopen = function(msg) {
    var socket;
    $openConnection.send(JSON.stringify({
      command: 'initialize',
      dsl: dsl,
      gateDelay: !$isImmediate
    }));
    return $openConnection.send(JSON.stringify({
      command: 'start',
      initialValues: (function() {
        var _i, _len, _ref, _results;
        _ref = Gate.inputs();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          socket = _ref[_i];
          _results.push({
            name: socket.name,
            value: Socket.states[socket.name] === 'on'
          });
        }
        return _results;
      })()
    }));
  };
  $openConnection.onerror = function(error) {
    return console.log('WebSocket Error ' + error);
  };
  return $openConnection.onmessage = function(e) {
    var res;
    console.log("Received: " + e.data);
    res = JSON.parse(e.data);
    if (res.command === 'update') {
      Socket.states[res.socket.name] = res.socket.value === 'false' ? 'off' : 'on';
    }
    return $(window).trigger('update', false);
  };
};

stopBoolex = function() {
  $openConnection.close();
  return $openConnection = null;
};

SelectBox = (function(_super) {
  __extends(SelectBox, _super);

  function SelectBox(startX, startY) {
    this.startX = startX;
    this.startY = startY;
    this.box = new createjs.Shape();
    this.endX = this.startX;
    this.endY = this.startY;
  }

  SelectBox.prototype.draw = function() {
    this.box.graphics.clear();
    this.box.graphics.beginStroke("rgba(0,0,0,0.3)");
    this.box.graphics.moveTo(this.startX, this.startY);
    this.box.graphics.lineTo(this.endX, this.startY);
    this.box.graphics.lineTo(this.endX, this.endY);
    this.box.graphics.lineTo(this.startX, this.endY);
    return this.box.graphics.lineTo(this.startX, this.startY);
  };

  SelectBox.prototype.between = function(n, low, high) {
    if (low < high && n > low && n < high || low > high && n < low && n > high) {
      return true;
    }
    return false;
  };

  SelectBox.prototype.selectDevicesUnder = function() {
    var device, x, y, _i, _len, _ref, _results;
    _results = [];
    for (_i = 0, _len = $allDevices.length; _i < _len; _i++) {
      device = $allDevices[_i];
      _ref = [device.x(), device.y()], x = _ref[0], y = _ref[1];
      if (this.between(x, this.startX, this.endX) && this.between(y, this.startY, this.endY)) {
        _results.push(device.select());
      } else {
        _results.push(device.deselect());
      }
    }
    return _results;
  };

  return SelectBox;

})(createjs.Shape);

SevenSegment = (function(_super) {
  __extends(SevenSegment, _super);

  SevenSegment.height = $gateSize * 2;

  function SevenSegment() {
    this.segments = [];
    SevenSegment.__super__.constructor.call(this, 7, 0);
  }

  SevenSegment.prepareSegments = function() {
    var baseX, baseY, digitHeight, digitWidth, i, paddingRatio, segmentLength, segmentPadding, segmentPaddingCartesian, segmentRatio, segmentThickness, segments, thicknessRatio, _i;
    baseX = -10;
    baseY = -18;
    digitHeight = $gateSize / 5;
    thicknessRatio = 0.5;
    paddingRatio = 0.2;
    segmentRatio = 0.3;
    digitWidth = digitHeight / 2;
    segmentThickness = digitHeight * thicknessRatio;
    segmentPadding = digitHeight * paddingRatio;
    segmentLength = segmentThickness / segmentRatio;
    segmentPaddingCartesian = segmentPadding * Math.sqrt(2) / 2;
    segments = (function() {
      var _i, _results;
      _results = [];
      for (i = _i = 0; _i <= 6; i = ++_i) {
        _results.push(new createjs.Shape());
      }
      return _results;
    })();
    segments[0].angle = 0;
    segments[1].angle = 90;
    segments[2].angle = 90;
    segments[3].angle = 0;
    segments[4].angle = 90;
    segments[5].angle = 90;
    segments[6].angle = 0;
    for (i = _i = 0; _i <= 6; i = ++_i) {
      segments[i].graphics.clear();
      segments[i].graphics.beginFill('#000');
      if (!segments[i].angle) {
        segments[i].graphics.moveTo(0, segmentThickness / 2);
        segments[i].graphics.lineTo(segmentThickness / 2, 0);
        segments[i].graphics.lineTo(segmentLength - segmentThickness / 2, 0);
        segments[i].graphics.lineTo(segmentLength, segmentThickness / 2);
        segments[i].graphics.lineTo(segmentLength - segmentThickness / 2, segmentThickness);
        segments[i].graphics.lineTo(segmentThickness / 2, segmentThickness);
        segments[i].graphics.lineTo(0, segmentThickness / 2);
      } else {
        segments[i].graphics.moveTo(segmentThickness / 2, 0);
        segments[i].graphics.lineTo(0, segmentThickness / 2);
        segments[i].graphics.lineTo(0, segmentLength - segmentThickness / 2);
        segments[i].graphics.lineTo(segmentThickness / 2, segmentLength);
        segments[i].graphics.lineTo(segmentThickness, segmentLength - segmentThickness / 2);
        segments[i].graphics.lineTo(segmentThickness, segmentThickness / 2);
        segments[i].graphics.lineTo(segmentThickness / 2, 0);
      }
    }
    segments[0].x = baseX + segmentThickness / 2 + segmentPaddingCartesian;
    segments[0].y = baseY;
    segments[1].x = segments[0].x + segmentLength - segmentThickness / 2 + segmentPaddingCartesian;
    segments[1].y = baseY + segmentThickness / 2 + segmentPaddingCartesian;
    segments[2].x = segments[1].x;
    segments[2].y = segments[1].y + segmentLength + 2 * segmentPaddingCartesian;
    segments[3].x = segments[0].x;
    segments[3].y = segments[2].y + segmentLength - segmentThickness / 2 + segmentPaddingCartesian;
    segments[4].x = baseX;
    segments[4].y = segments[2].y;
    segments[5].x = baseX;
    segments[5].y = segments[1].y;
    segments[6].x = segments[0].x;
    segments[6].y = segments[1].y + segmentLength - segmentThickness / 2 + segmentPaddingCartesian;
    return segments;
  };

  SevenSegment.createGraphics = function(device) {
    var box, container, segment, segments, _i, _len;
    container = new createjs.Container();
    box = new createjs.Shape();
    box.graphics.beginFill('#fff');
    box.graphics.rect(0, 0, $gateSize, this.height);
    box.x = -$gateSize * 0.5;
    box.y = -$gateSize;
    container.hitArea = box;
    segments = this.prepareSegments();
    if (device) {
      device.segments = segments;
    }
    for (_i = 0, _len = segments.length; _i < _len; _i++) {
      segment = segments[_i];
      container.addChild(segment);
    }
    return container;
  };

  SevenSegment.prototype.draw = function() {
    var i, _i, _results;
    _results = [];
    for (i = _i = 0; _i <= 6; i = ++_i) {
      _results.push(this.segments[i].alpha = Socket.states[this.inputSockets[i].name] === 'on' ? 1 : 0.2);
    }
    return _results;
  };

  SevenSegment.displayName = 'CHAR';

  SevenSegment.bitmapOffPath = '/assets/images/lightbulb_off.png';

  SevenSegment.bitmapOnPath = '/assets/images/lightbulb_on.png';

  return SevenSegment;

})(IODevice);

IODevice.registerType(SevenSegment);

Socket = (function(_super) {
  __extends(Socket, _super);

  function Socket(device, index, type, name) {
    this.device = device;
    this.index = index;
    this.type = type;
    this.name = name;
    this.initGraphics();
    this.initEvents();
    this.wires = [];
    this.name || (this.name = Socket.makeName());
    Socket.states[this.name] = 'off';
    Socket.__super__.constructor.call(this);
  }

  Socket.prototype.initGraphics = function() {
    this.graphics = new createjs.Container();
    this.circle = new createjs.Shape();
    this.circle.graphics.beginFill('black').drawCircle(0, 0, $socketSize);
    this.box = new createjs.Shape();
    this.box.graphics.beginFill('black').drawRect(-$socketSize, -$socketSize, $socketSize * 2, $socketSize * 2);
    this.graphics.hitArea = this.box;
    return this.graphics.addChild(this.circle);
  };

  Socket.prototype.initEvents = function() {
    return this.graphics.on('mousedown', (function(_this) {
      return function(e) {
        var wire;
        if (_this.type === 'out') {
          wire = new Wire(_this, null);
        } else {
          wire = new Wire(null, _this);
        }
        return wire.startDrag(e);
      };
    })(this));
  };

  Socket.prototype.connectedSockets = function() {
    var getter, wire, _i, _len, _ref, _results;
    getter = this.type === 'in' ? 'fromSocket' : 'toSocket';
    _ref = this.wires;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      wire = _ref[_i];
      if (wire[getter] != null) {
        _results.push(wire[getter]);
      }
    }
    return _results;
  };

  Socket.prototype.connectedToGate = function(gates) {
    var gate, gate_ids, socket, _i, _len, _ref;
    if (gates) {
      gate_ids = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = gates.length; _i < _len; _i++) {
          gate = gates[_i];
          _results.push(gate.id);
        }
        return _results;
      })();
    }
    _ref = this.connectedSockets();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      socket = _ref[_i];
      if (socket.device instanceof Gate) {
        if (!gates || $.inArray(socket.device.id, gate_ids) >= 0) {
          return true;
        }
      }
    }
    return false;
  };

  Socket.prototype.connectedToLightbulb = function() {
    var socket, _i, _len, _ref;
    _ref = this.connectedSockets();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      socket = _ref[_i];
      if (socket.device instanceof Lightbulb) {
        return true;
      }
    }
    return false;
  };

  Socket.prototype.x = function() {
    return this.graphics.localToGlobal(0, 0).x;
  };

  Socket.prototype.y = function() {
    return this.graphics.localToGlobal(0, 0).y;
  };

  Socket.prototype.destroy = function() {
    var wire, _i, _len, _ref;
    _ref = this.wires;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      wire = _ref[_i];
      wire.destroy();
    }
    return Socket.remove(this);
  };

  Socket.prototype.isRealOutput = function(gates) {
    return this.type === 'out' && (!this.connectedToGate(gates) || this.connectedToLightbulb());
  };

  Socket.makeName = function() {
    var name;
    name = "t" + this.nameCounter;
    this.nameCounter++;
    return name;
  };

  Socket.connect = function(fromSocket, toSocket, wire) {
    fromSocket.wires.push(wire);
    toSocket.wires.push(wire);
    return toSocket.name = fromSocket.name;
  };

  Socket.states = {};

  Socket.nameCounter = 0;

  return Socket;

})(Collectable);

Switch = (function(_super) {
  __extends(Switch, _super);

  function Switch() {
    Switch.__super__.constructor.call(this, 0, 1);
    this.outSocket = this.outputSockets[0];
  }

  Switch.prototype.click = function() {
    if (Socket.states[this.outSocket.name] === 'on') {
      Socket.states[this.outSocket.name] = 'off';
    } else {
      Socket.states[this.outSocket.name] = 'on';
    }
    return $(window).trigger('update', [true, this.outSocket]);
  };

  Switch.createGraphics = function(device) {
    var box, container, switchWell, switcher;
    container = new createjs.Container();
    switchWell = new createjs.Shape();
    switchWell.graphics.setStrokeStyle(2);
    switchWell.graphics.beginStroke('#000000');
    switchWell.graphics.drawRoundRect(-10, -5, 20, 10, 10);
    switcher = new createjs.Shape();
    switcher.graphics.beginFill('#000000');
    switcher.graphics.drawCircle(0, 0, 3);
    container.addChild(switchWell);
    container.addChild(switcher);
    if (device != null) {
      device.switcher = switcher;
    }
    box = new createjs.Shape();
    box.graphics.beginFill(createjs.Graphics.getRGB(255, 0, 0));
    box.graphics.rect(0, 0, $gateSize, $gateSize);
    box.x = -$gateSize * 0.5;
    box.y = -$gateSize * 0.5;
    container.hitArea = box;
    return container;
  };

  Switch.prototype.draw = function() {
    this.outSocket || (this.outSocket = this.outputSockets[0]);
    if (Socket.states[this.outSocket.name] === 'on') {
      return this.switcher.x = 5;
    } else {
      return this.switcher.x = -5;
    }
  };

  Switch.displayName = 'SWITCH';

  return Switch;

})(IODevice);

IODevice.registerType(Switch);

Tool = (function() {
  function Tool(deviceClass, index) {
    this.deviceClass = deviceClass;
    this.index = index;
    this.graphics = new createjs.Container();
    this.graphics.addChild(deviceClass.createGraphics());
    this.graphics.on('mousedown', function(e) {
      var newGate, _ref;
      newGate = new deviceClass();
      _ref = (function(coord) {
        return [coord.x, coord.y];
      })(this.localToGlobal(0, 0)), newGate.graphics.x = _ref[0], newGate.graphics.y = _ref[1];
      return newGate.startDrag(e);
    });
  }

  return Tool;

})();

Toolbox = (function() {
  function Toolbox() {
    var device, i, tool, y, _i, _j, _len, _len1, _ref, _ref1;
    this.devices = Gate.types.concat(IODevice.types);
    this.tools = (function() {
      var _i, _len, _ref, _results;
      _ref = this.devices;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        device = _ref[i];
        _results.push(new Tool(device, i));
      }
      return _results;
    }).call(this);
    y = 0;
    _ref = this.tools;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      tool = _ref[_i];
      tool.graphics.y = y + tool.deviceClass.height / 2;
      tool.graphics.x = $halfGateSize;
      y += tool.deviceClass.height + Toolbox.padding;
    }
    this.graphics = new createjs.Container();
    _ref1 = this.tools;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      tool = _ref1[_j];
      this.graphics.addChild(tool.graphics);
    }
    window.boolexStage.addChild(this.graphics);
  }

  Toolbox.padding = 5;

  return Toolbox;

})();

Wire = (function(_super) {
  __extends(Wire, _super);

  function Wire(fromSocket, toSocket) {
    this.fromSocket = fromSocket;
    this.toSocket = toSocket;
    this.stopDrag = __bind(this.stopDrag, this);
    this.drag = __bind(this.drag, this);
    this.startDrag = __bind(this.startDrag, this);
    this.initGraphics();
    this.target = null;
    Wire.__super__.constructor.call(this);
    if ((this.fromSocket != null) && (this.toSocket != null)) {
      Socket.connect(this.fromSocket, this.toSocket, this);
    } else if (this.fromSocket != null) {
      this.startSocket = this.fromSocket;
      this.endSocket = 'toSocket';
    } else if (this.toSocket != null) {
      this.startSocket = this.toSocket;
      this.endSocket = 'fromSocket';
    }
  }

  Wire.prototype.initGraphics = function() {
    this.graphics = new createjs.Container();
    this.line = new createjs.Shape();
    this.graphics.addChild(this.line);
    this.line.snapToPixel = true;
    return window.boolexStage.addChild(this.graphics);
  };

  Wire.prototype.startDrag = function(e) {
    var startSocketPos;
    this.line.graphics.clear();
    startSocketPos = this.startSocket.graphics.localToGlobal(0, 0);
    this.drawTo(startSocketPos.x, startSocketPos.y, e.stageX, e.stageY);
    return boolexStage.dragged = this;
  };

  Wire.prototype.drag = function(e) {
    var socket, startSocketPos, _i, _len, _ref, _results;
    startSocketPos = this.startSocket.graphics.localToGlobal(0, 0);
    this.line.graphics.moveTo(startSocketPos.x, startSocketPos.y);
    if (this.target != null) {
      this.drawTo(startSocketPos.x, startSocketPos.y, this.target.x(), this.target.y());
    } else {
      this.drawTo(startSocketPos.x, startSocketPos.y, e.stageX, e.stageY);
    }
    this.target = null;
    _ref = Socket.all;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      socket = _ref[_i];
      if (distance(socket.x(), socket.y(), e.stageX, e.stageY) < $socketSize * 2) {
        if (socket.type !== this.startSocket.type) {
          if (!(socket.type === 'in' && socket.wires.length)) {
            this.target = socket;
            break;
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  Wire.prototype.drawTo = function(x1, y1, x2, y2) {
    this.line.graphics.clear();
    if (this.fromSocket && Socket.states[this.fromSocket.name] === 'on' && $openConnection) {
      this.line.shadow = new createjs.Shadow("#00aaff", 0, 0, 5);
    } else {
      this.line.shadow = null;
    }
    this.line.graphics.beginStroke('black');
    this.line.graphics.moveTo(x1, y1);
    if (x1 < x2) {
      this.line.graphics.lineTo((x2 + x1) * 0.5, y1);
      this.line.graphics.lineTo((x2 + x1) * 0.5, y2);
      return this.line.graphics.lineTo(x2, y2);
    } else {
      this.line.graphics.lineTo(x1 + 30, y1);
      this.line.graphics.lineTo(x1 + 30, (y1 + y2) * 0.5);
      this.line.graphics.lineTo(x2 - 30, (y1 + y2) * 0.5);
      this.line.graphics.lineTo(x2 - 30, y2);
      return this.line.graphics.lineTo(x2, y2);
    }
  };

  Wire.prototype.stopDrag = function(e) {
    if (this.target) {
      this[this.endSocket] = this.target;
      Socket.connect(this.fromSocket, this.toSocket, this);
      return $(window).trigger('refreshDSL');
    } else {
      return this.destroy();
    }
  };

  Wire.prototype.redraw = function() {
    var fromSocketPos, toSocketPos;
    fromSocketPos = this.fromSocket.graphics.localToGlobal(0, 0);
    if (!this.toSocket) {
      return;
    }
    toSocketPos = this.toSocket.graphics.localToGlobal(0, 0);
    return this.drawTo(fromSocketPos.x, fromSocketPos.y, toSocketPos.x, toSocketPos.y);
  };

  Wire.prototype.destroy = function() {
    var id;
    window.boolexStage.removeChild(this.graphics);
    id = this.id;
    if (this.fromSocket) {
      this.fromSocket.wires = $.grep(this.fromSocket.wires, function(wire) {
        return wire.id !== id;
      });
    }
    if (this.toSocket) {
      this.toSocket.wires = $.grep(this.toSocket.wires, function(wire) {
        return wire.id !== id;
      });
    }
    return Wire.__super__.destroy.call(this);
  };

  return Wire;

})(Collectable);
